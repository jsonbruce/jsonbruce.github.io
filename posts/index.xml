<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Max</title>
    <link>http://www.example.com/posts/</link>
    <description>Recent content in Posts on Max</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 May 2019 09:42:22 +0800</lastBuildDate>
    
	<atom:link href="http://www.example.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo 和 GitHub Pages 使用指南</title>
      <link>http://www.example.com/posts/userguide/</link>
      <pubDate>Tue, 14 May 2019 09:42:22 +0800</pubDate>
      
      <guid>http://www.example.com/posts/userguide/</guid>
      <description>简介 hugo 是一个基于 golang 静态网站生成程序，类似于 hexo。
GitHub Pages 是 GitHub 提供的一项服务，可以直接从 GitHub 仓库为个人，组织或项目页面提供基于SSL的免费和快速静态托管。
之前个人主页使用的 hexo 来生成的，是基于 node.js 构建的，速度较慢，
安装 hugo mkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended 注意
 从 hugo 0.48 开始使用 go mod 进行依赖管理 使用 Linux 包管理安装的 hugo 版本可能较低，有些主题不支持  使用 官方教程是创建两个仓库: 一个放源码(hugo new site .的所有文件)，一个放静态页面(生成的 public/目录)。
个人习惯使用一个仓库，不同分支。
 一个仓库: jsonbruce.github.io 不同分支: master 分支用于静态页面，hugo 分支用于源码, hexo 分支用于之前 hexo 源码  初始化 1.</description>
    </item>
    
  </channel>
</rss>